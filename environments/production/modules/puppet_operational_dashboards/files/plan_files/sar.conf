[[inputs.file]]
data_format = "value"
data_type = "string"
files = ["./metrics/system_cpu/**json"]
[inputs.file.tags]
type = 'sar'

[[processors.starlark]]
namepass = ["file"]
source = '''
load("json.star", "json")
load("time.star", "time")

def apply(metric):
  d = json.decode(metric.fields['value'])
  server = d['servers'].keys()[0]
  timestamp = d['timestamp']
  date = time.parse_time(d['timestamp'], location="UTC").unix_nano
  metrics = []

  if 'error' in d['servers'][server]['system_cpu']:
     return

  m = d['servers'][server]['system_cpu']

  sar_metrics = iterate_metric_array(m, 'name', ['value'])

  for metric in sar_metrics:
    metric.time = date
    metric.tags['server'] = server
    metrics.append(metric)

  return metrics

def iterate_metric_array(metric_array, tag_field, fields):
  local_metrics = []

  for d in metric_array:
    metric = Metric("sar")
    metric.tags[tag_field] = d[tag_field]

    for field in fields:
      metric.fields[field] = d[field]

    local_metrics.append(metric)

  return local_metrics

'''
[processors.starlark.tagpass]
type = ['sar']
